/*
* Jetfuel Game Engine- A SDL-based 2D game-engine
* Copyright (C) 2018 InfernoStudios
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef JETFUELDRAW_SCENEMANAGER_H_
#define JETFUELDRAW_SCENEMANAGER_H_

#include <stdexcept>
#include <mutex>

#ifdef __linux__
	#include <SDL2/SDL.h>
#else
	#include <SDL.h>
#endif

#include <jetfueldraw/color.h>
#include <jetfueldraw/vector2d.h>


namespace jetfuel {
    namespace draw {
        namespace exceptions{
            class SDL_Init_exception : public std::runtime_error{
            public:
                /// \brief Constructs an SDL_Init_exception with the
                /// error text.
                ///
                /// Constructs an SDL_Init_exception with the error
                /// text.
                SDL_Init_exception(const std::string sdl_initerror) : 
                std::runtime_error("SDL_Init Exception:"+sdl_initerror){}
            };

            /// \class jetfuel::draw::exceptions::SDL_Init_exception
            ///
            /// An exception to throw when the SDL initialize
            /// function SDL_Init fails.
            ///
            /// Code Example:
            /// if(SDL_Init(SDL_INIT_VIDEO) != 0){
            ///     throw exceptions::SDL_Init_exception(SDL_GetError());
            /// }
        }

        class Scene;
        class Image;

        class Scene_manager {
        public:
            enum class Window_mode{
                Windowed,
                Windowed_fullscreen,
                Fullscreen
            };

            /// \brief Constructs a Scene_manager with the option of
            /// not initializing SDL within the Scene_manager.
            ///
            /// Constructs a Scene_manager with the option of not
            /// initializing SDL within the Scene_manager.
            /// By default, the Scene_manager initializes SDL.
            /// If you pass in false to initwindow,
            /// you must initialize SDL yourself if you
            /// want to use a Scene_manager.
            ///
            /// \param bool initwindow
            Scene_manager(bool initwindow = true);

            /// \brief Virtual destructor
            ///
            /// Cleans up the Scene_manager's resources.
            virtual ~Scene_manager();

            /// \brief Creates a window to draw objects on.
            ///
            /// Creates a window to draw objects on.
            /// The windowtitle is the title that is shown on the top
            /// of the window. The position to create a window
            /// specifies where the window should appear on the
            /// player's display. The window's size is how big
            /// the window should be. This will then return a boolean
            /// whether the window was created or not.
            ///
            /// \param std::string windowtitle
            /// \param jetfuel::draw::Vector2d_int
            ///  positiontocreatewindow
            /// \param jetfuel::draw::Vector2d_int windowsize
            bool Create_window(const std::string windowtitle,
                    const Vector2d_int positiontocreatewindow,
                               const Vector2d_int windowsize,
                    Window_mode windowmode = Window_mode::Windowed);

            void Set_window_icon(jetfuel::draw::Image icon);

            /// \brief Gets the current window's id for
            /// differentiating this window and other windows.
            ///
            /// Gets the current window's id for differentiating
            /// this window and other windows.
            Uint32 *Get_window_id() const{
                if(window!=NULL){
                    return m_windowid;
                }
                return NULL;
            }

            bool Is_window_full_screen(){
                return m_windowwindowmode !=
                        jetfuel::draw::Scene_manager::Window_mode::Windowed;
            }

            /// \brief Sets a pre-constructed window to be
            /// used to draw objects on.
            ///
            /// Sets a pre-constructed window to be used to draw 
            /// objects on. This function will return a boolean
            /// of whether the window was set(true), or whether
            /// the window pointer equals NULL(false).
            ///
            /// \param SDL_Window *windowtouse
            bool Set_window(SDL_Window *windowtouse);

            /// \brief Creates a renderer binded to the previously
            /// created window for drawing.
            ///
            /// Creates a renderer (by default using vsync, 
            /// hardware acceleration, and the first
            /// GPU for rendering) for drawing jetfuel::draw::Scene's
            /// drawables. If the renderer could not be created,
            /// this function will return false. Otherwise,
            /// it will return true.
            ///
            /// \param bool vsyncenabled
            /// \param bool usehardwareaccel
            /// \param int gpuindex
            bool Create_renderer(const bool vsyncenabled = true, 
                                const bool usehardwareaccel = true,
                                const int gpuindex = -1);

            /// \brief Sets a pre-constructed renderer to the
            /// Scene_manager to be used for drawing.
            ///
            /// Sets a pre-constructed renderer to the Scene_manager
            /// to be used for drawing. This function will return
            /// false if the renderer pointer given equates to NULL,
            /// and will not set the renderer. Otherwise, it will
            /// return true and will set the renderer.
            ///
            /// \param SDL_Renderer *renderertouse
            bool Set_renderer(SDL_Renderer *renderertouse);

            /// \brief Gets the currently used renderer from the
            /// Scene_manager to draw and render objects. 
            ///
            /// Gets the currently used renderer from the
            /// Scene_manager to draw and render objects. This
            /// function is meant to be used inside the
            /// jetfuel::draw::Scene object, however it can be called
            /// by itself if you want to do SDL rendering by yourself.
            SDL_Renderer *Get_renderer(){
                return renderer;
            }

            /// \brief Sets the universal background color to be used 
            /// with all jetfuel::draw::Scenes who don't have
            /// their own background color.
            ///
            /// Sets the universal background color to be used with
            /// all jetfuel::draw::Scenes who don't have their own
            /// background color. jetfuel::draw::Scenes which
            /// do have their own background color override this
            /// background color and display their background color.
            ///
            /// \param jetfuel::draw::Color color
            void Set_universal_background_color(Color color){
                m_universalbackgroundcolor = color;
            }

            /// \brief Gets the universal background color.
            ///
            /// Gets the universal background color. This color
            /// will be black by default if no color was set.
            Color Get_universal_background_color() const{
                return m_universalbackgroundcolor;
            }

            /// \brief Gets the current active scene.
            ///
            /// Gets the current active scene in this Scene_manager.
            Scene *Get_current_scene(){
                return m_currentscene;
            }

            /// \brief Switches the current active scene.
            ///
            /// Switches the current active Scene. This
            /// allows the jetfuel::draw::Scene to attach Drawables,
            /// render, and draw stuff to the window.
            ///
            /// \param jetfuel::draw::Scene *scene
            void Switch_current_scene(Scene *scene);

            /// \brief Draws the current active scene.
            ///
            /// Draws the current active scene. This function also
            /// draws the universal background color and the current
            /// scene's background color(if any). If there is
            /// no current active scene, nothing will be
            /// drawn except for the universal background color.
            void Draw_current_scene();
        protected:
            /// \brief Sets the window's id number.
            ///
            /// Sets the window's id number for differentiating
            /// this window and other windows.
            ///
            /// \param Uint32 id
            void Set_window_id(Uint32 id){
                *m_windowid = id;
            }

            /// \brief Sets the current active scene.
            ///
            /// Sets the current active scene to be used with
            /// drawing objects.
            ///
            /// \param jetfuel::draw::Scene *scene
            void Set_current_scene(Scene *scene) {
                m_currentscene = scene;
            }

            void Set_window_window_mode(jetfuel::draw::Scene_manager::
                                        Window_mode windowmode){
                m_windowwindowmode = windowmode;
            }

            ///////////////////
            /// member data ///
            ///////////////////

            SDL_Window *window; ///< Current window for renderer
            SDL_Renderer *renderer; ///< Current renderer
                                    ///< for rendering objects
        private:
            Uint32 *m_windowid = new Uint32();///< Current window id number for
            ///^ differentiating this window and other windows.

            Color m_universalbackgroundcolor; ///< Universal
                                              ///< background color
                                              ///< for coloring
                                              ///< backgrounds.

            Scene *m_currentscene = NULL; ///< Current active scene
                                          ///< pointer for drawing
                                          ///< objects.

            Window_mode m_windowwindowmode;

            std::mutex scenemanagermutex;
        };

        /// \class jetfuel::draw::Scene_manager
        ///
        /// A scene manager to be in used in conjunction
        /// with a jetfuel::draw::Scene to draw objects in a Scene-oriented
        /// fashion.
        ///
        /// Code Example:
        /// 	\code
        ///     jetfuel::draw::Scene_manager scenemanager;
        ///     jetfuel::draw::Scene scene1(1);
        ///     jetfuel::draw::Image image = jetfuel::draw::Image("test.png");
        ///     jetfuel::draw::Sprite background;
        ///
        ///     if(!scenemanager.Create_window("example",
        ///                              jetfuel::draw::Vector2d_int(0,0),
        ///                              jetfuel::draw::Vector2d_int(500,500))){
        ///        std::cerr << "[!]ERROR with creating sdl renderer!" <<
        ///         "Error is:" << SDL_GetError() << "\n";
        ///     }
        ///
        ///     if(!scenemanager.Create_renderer()){
        ///          std::cerr << "[!]ERROR with creating sdl renderer!" <<
        ///         "Error is:" << SDL_GetError() << "\n";
        ///     }
        ///
        ///     scenemanager.Switch_current_scene(&scene1);
        ///     scene1.Attach_drawable(&background);
        ///
        ///     if(!background.Load_from_image(backgroundimage)){
        ///         std::cerr << "[!]ERROR with loading from image! Error is:" << IMG_GetError() << "\n";
        ///         return 1;
        ///     }
        ///
        ///     background.Set_position(jetfuel::draw::Vector2d_int(0,0));
        ///
        ///     scenemanager.Draw_current_scene();
        /// 	\endcode

    } /* namespace inspire */
} /* namespace jetfuel */

#endif /* JETFUELDRAW_SCENEMANAGER_H_ */
