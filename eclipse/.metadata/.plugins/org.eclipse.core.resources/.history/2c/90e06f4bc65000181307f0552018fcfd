/*
* Jetfuel Game Engine- A SDL-based 2D game-engine
* Copyright (C) 2018 InfernoStudios
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef JETFUELCONTROL_UISMANAGER_H
#define JETFUELCONTROL_UISMANAGER_H

#include <fstream>
#include <sstream>
#include <cstring>
#include <chrono>

#ifdef __linux__
	#include <SDL2/SDL.h>
#else
	#include <SDL.h>
#endif

#include <rapidjson/document.h>

#include "../config.h"

#include <jetfuelcore.h>

#include <jetfueldraw/rect2d.h>

namespace jetfuel {
    namespace control {
        struct UIS_previous_key{
            std::string previouskey;
            std::string previousaction;
        };
        /// \class jetfuel::control::UIS_previous_key
        ///
        /// A struct used internally by the Universal Input System
        /// manager (or jetfuel::control::UIS_manager) to track a key
        /// action. It should not be used outside of the Universal
        /// Input System manager.
        class UIS_manager {
        public:
            /// \brief Constructs an Universal Input System manager
            /// with a message bus and the current window's id.
            ///
            /// Constructs an Universal Input System manager with a
            /// message bus to post ingame actions in
            /// and the current window's id for mouse input
            /// which can be obtained via a jetfuel::draw::Scene_manager.
            ///
            /// \param jetfuel::core::Message_bus *bus
            /// \param Uint32 *currentwindowid
            UIS_manager(jetfuel::core::Message_bus *bus, Uint32 *currentwindowid);

            /// \brief Opens a JSON controller configuration file.
            ///
            /// Opens a JSON controller configuration file. This JSON
            /// controller configuration file details what keys equal
            /// to what actions.
            ///
            /// \param std::string configfilepath
            void Open_controller_config_file(const std::string configfilepath);

            /// \brief Processes an input event passed from SDL.
            ///
            /// Processes an input event passed from SDL. This
            /// function does the actual translation from a SDL_Event
            /// to a message in a message bus which is then picked up
            /// by the Universal Input System interpreter
            /// (or jetfuel::control::UIS_interpreter).
            ///
            /// \param SDL_Event *event
            void Process_input_event(SDL_Event *event);

            std::vector<std::string> Get_last_keys_entered(){
            	return m_lastkeyboardkeynamespressed;
            }
        protected:
            /// \brief Loads a JSON file from a JSON file's path into
            /// the internal rapidjson value.
            ///
            /// Loads a JSON file from a JSON file's path into
            /// the internal rapidjson value.
            ///
            /// \param std::string filepath
            void Load_json_file(const std::string filepath){
                std::ifstream file(filepath);
                std::stringstream buffer;

                buffer << file.rdbuf();

                jsondoc.Parse(buffer.str().c_str());
            }

            /// \brief Detects a desktop SDL event.
            ///
            /// Detects a desktop SDL event for translation.
            /// This function will only run on desktop systems,
            /// and not on any mobile systems.
            ///
            /// \param SDL_Event *event
            void Detect_desktop_event(SDL_Event *event);

            /// \brief Detects a mobile SDL event.
            ///
            /// Detects a mobile SDL event for translation.
            /// This function will only run on mobile systems,
            /// and not on any desktop systems.
            ///
            /// \param SDL_Event *event
            void Detect_mobile_event(SDL_Event *event);

            /// \brief Posts a message to the assigned message bus.
            ///
            /// Posts a message to the assigned message bus.
            ///
            /// \param std::string message
            void Post_message_to_message_bus(const std::string message){
                m_messagebus->Post_message(message);
            }

            /// \brief Gets the JSON controller configuration file
            /// name.
            ///
            /// Gets the JSON controller configuration file
            /// name.
            std::string Get_file_name() const {
                return m_filename;
            }

            /// \brief Sets the JSON controller configuration file
            /// name.
            ///
            /// Sets the JSON controller configuration file
            /// name.
            ///
            /// \param std::string filename
            void Set_file_name(const std::string filename) {
                m_filename = filename;
            }

            /// \brief Gets the past file name for identifying a
            /// change in file names.
            ///
            /// Gets the past file name for identifying a
            /// change in file names.
            std::string Get_past_file_name() const {
                return m_pastfilename;
            }

            /// \brief Gets the assigned window id pointer for
            /// identifying mouse state.
            ///
            /// Gets the assigned window id pointer for
            /// identifying mouse state.
            Uint32 *Get_window_id() const {
                return m_windowid;
            }

            /// \brief Checks whether the game window is active.
            ///
            /// Checks whether the game window is active.
            bool Is_window_active() const {
                return m_windowactive;
            }

            /// \brief Sets the game window active boolean.
            ///
            /// Sets the game window active boolean.
            ///
            /// \param bool windowactive
            void Set_window_active(const bool windowactive) {
                m_windowactive = windowactive;
            }

            /// \brief Sets the past file name string variable.
            ///
            /// Sets the past file name string variable for
            /// identifying file name changes.
            ///
            /// \param std::string pastfilename
            void Set_past_file_name(const std::string pastfilename) {
                m_pastfilename = pastfilename;
            }

            /// \brief Pushes a key to the past keys entered vector.
            ///
            /// Pushes a key to the past keys entered vector to be
            /// examined later when checking if that key has changed it's
            /// input state.
            ///
            /// \param UIS_previous_key key
            void Push_key_to_past_keys_entered_vector(UIS_previous_key key){
                m_pastkeysentered.push_back(key);
            }

            /// \brief Gets the size of the past keys entered vector.
            ///
            /// Gets the size of the past keys entered vector.
            size_t Get_size_of_past_keys_entered_vector() const{
                return m_pastkeysentered.size();
            }

            /// \brief Gets a past key in the past keys entered
            /// vector.
            ///
            /// Gets a past key in the past keys entered
            /// vector. If the place argument is set above the size of
            /// the past keys entered vector, the function will throw
            /// a
            /// jetfuel::core::exceptions::Out_of_vector_range_exception.
            /// Otherwise, it will return the UIS_previous_key for
            /// that place in the vector.
            ///
            /// \param int place
            UIS_previous_key Get_past_key_in_vector(const int place){
                if(place>=Get_size_of_past_keys_entered_vector()){
                    throw jetfuel::core::exceptions::Out_of_vector_range_exception();
                }else{
                    return m_pastkeysentered[place];
                }
            }

            /// \brief Gets the last mouse action processed by this
            /// Universal Input System manager.
            ///
            /// Gets the last mouse action processed by this
            /// Universal Input System manager.
            std::string Get_last_mouse_action() const {
                return m_lastmouseaction;
            }

            /// \brief Sets the last mouse action processed by this
            /// Universal Input System manager.
            ///
            /// Sets the last mouse action processed by this
            /// Universal Input System manager.
            ///
            /// \param std::string lastmouseaction
            void Set_last_mouse_action(const std::string lastmouseaction) {
                m_lastmouseaction = lastmouseaction;
            }

            /// \brief Erases an object in the past keys entered vector
            /// by place.
            ///
            /// Erases an object in the past keys entered vector
            /// by place when a past key has been processed.
            /// This function will throw a
            /// jetfuel::core::exceptions::Out_of_vector_range_exception
            /// if the place provided is greater than or equal to
            /// the size of the past keys vector.
            ///
            /// \param int place.
            void Erase_place_in_past_keys_vector(const int place){
                if(place >= m_pastkeysentered.size()){
                    throw jetfuel::core::exceptions::
                    Out_of_vector_range_exception();
                }else{
                    m_pastkeysentered.erase(m_pastkeysentered.begin()+place);
                }
            }

            void Push_key_name_to_last_keys_pressed_vector(std::string keyname){
            	if(std::chrono::duration_cast<std::chrono::milliseconds>(std::
					chrono::high_resolution_clock::now() - m_lastclicktime).
					count() > 100){

            		m_lastclicktime = std::chrono::high_resolution_clock::now();
                	m_lastkeyboardkeynamespressed.push_back(keyname);
            	}
            }

            /// \brief Processes a keyboard key down SDL event.
            ///
            /// Processes a keyboard key down SDL event. This
            /// function will only be called on desktop systems,
            /// NOT on any mobile systems.
            ///
            /// \param SDL_Event *event
            void Process_key_down_event(SDL_Event *event);

            /// \brief Processes a keyboard key up SDL event.
            ///
            /// Processes a keyboard key up SDL event. This
            /// function will only be called on desktop systems,
            /// NOT on any mobile systems.
            ///
            /// \param SDL_Event *event
            void Process_key_up_event(SDL_Event *event);

            /// \brief Processes a mouse down SDL event.
            ///
            /// Processes a mouse down SDL event. This
            /// function will only be called on desktop systems,
            /// NOT on any mobile systems.
            ///
            /// \param SDL_Event *event
            void Process_mouse_down_event(SDL_Event *event);

            /// \brief Processes a mouse up SDL event.
            ///
            /// Processes a mouse up SDL event. This
            /// function will only be called on desktop systems,
            /// NOT on any mobile systems.
            void Process_mouse_up_event();

            /// \brief Processes a controller button down SDL event.
            ///
            /// Processes a controller button down SDL event. This
            /// function is the only process input-specific
            /// function that will be executed on any system,
            /// regardless whether it is a mobile or desktop system.
            ///
            /// \param SDL_Event *event
            void Process_controller_button_down_event(SDL_Event *event);

            ///////////////////
            /// member data ///
            ///////////////////

            rapidjson::Document jsondoc; ///< rapidjson JSON document
            ///^ file
        private:
            std::chrono::high_resolution_clock::time_point m_lastclicktime =
            		std::chrono::high_resolution_clock::now();

            std::vector<std::string> m_lastkeyboardkeynamespressed;
            std::string m_filename; ///< JSON filename
            std::string m_pastfilename; ///< past JSON filename
            std::string m_lastmouseaction; ///< the last mouse action
            bool m_windowactive = true; ///< whether the window is
            ///^ active or not

            Uint32 *m_windowid; ///< the current window id

            std::vector<UIS_previous_key> m_pastkeysentered; ///< The
            ///^ past keys entered vector.

            jetfuel::core::Message_bus *m_messagebus; ///< The message
            ///^ bus pointer
        };

        /// \class jetfuel::control::UIS_manager
        ///
        /// An Universal Input System manager to translate SDL Input
        /// events into in-game actions.
        /// When used in tandem with the Universal Input System
        /// (or UIS) interpreter, it allows your players to
        /// modify the bindings for certain in-game actions
        /// via a simple JSON file, makes implementing a control
        /// binding option in-game easier, and allows your program
        /// to perform the same action regardless if the player is
        /// playing with a Keyboard & Mouse, a controller, or even a
        /// touch screen.
        ///
        /// Code example:
        ///
        ///     C++ Code File:
        /// 		\code
        ///            jetfuel::core::Message_bus messagebus;
        ///            jetfuel::draw::Scene_manager scenemanager;
        ///            jetfuel::draw::Scene scene1(1);
        ///            jetfuel::control::UIS_manager UISmanager(&messagebus,
        ///                                                  scenemanager.
        ///                                                  Get_window_id());
        ///            jetfuel::control::UIS_interpreter UISinterpreter(&messagebus
        ///                                                                   );
        ///
        ///            if(!scenemanager.Create_window(windowlabel,
        ///                                           windowposition,
        ///                                           windowsize)){
        ///                 std::cerr << "[!]ERROR with creating sdl window!"
        ///                 << "Error is:" << SDL_GetError() << "\n";
        ///                 // Quit the application
        ///            }
        ///
        ///            if(!scenemanager.Create_renderer()){
        ///                 std::cerr << "[!]ERROR with creating sdl renderer!"
        ///                 << "Error is:" << SDL_GetError() << "\n";
        ///                 // Quit the application
        ///            }
        ///
        ///            UISmanager.Open_controller_config_file("UISConfig.json");
        ///
        ///            while(true){
        ///                jetfuel::control::Action UISactions =
        ///                UISinterpreter.Interpret();
        ///                if(UISactions.action != "Nothing to interpret."
        ///                   ){
        ///                        if(UISactions.action == "Say_hello"){
        ///                            if(UISactions.inputstate ==
        ///                              UISactions.Down){
        ///                               std::cout << "Why hello there!\n";
        ///                            }else if(UISactions.inputstate ==
        ///                                     UISactions.Up){
        ///                                std::cout
        ///                                << "Why goodbye there!\n";
        ///                            }
        ///                        }
        ///                    }
        ///            }
        ///            for(int i = 0; messagebus.Get_SDL_events_size() > i; ++i){
        ///                SDL_Event event = messagebus.Get_SDL_event(i);
        ///                if(event.type = SDL_QUIT){
        ///                    // Quit the application
        ///                }else{
        ///                    UISmanager.Process_input_event(&event);
        ///                }
        ///            }
        /// 		\endcode
        ///
        ///
        ///     JSON file(UISConfig.json):
        /// 	\code
        ///         {
        ///             "keyidnumber": 1,
        ///             "Keys": [
        ///               {
        ///                 "key": "A",
        ///                 "action": "Say_hello"
        ///               }
        ///             ]
        ///         }
        /// 	\endcode
    } /* namespace control */
} /* namespace jetfuel */

#endif /* JETFUELCONTROL_UISMANAGER_H */
