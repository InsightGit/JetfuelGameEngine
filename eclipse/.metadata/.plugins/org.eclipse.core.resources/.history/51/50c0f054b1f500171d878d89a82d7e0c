/*
* Jetfuel Game Engine- A SDL-based 2D game-engine
* Copyright (C) 2017 InfernoStudios
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef JETFUELGUI_DROPDOWNBOX_H_
#define JETFUELGUI_DROPDOWNBOX_H_

#include <jetfueldraw.h>
#include <jetfuelgui/iclickable.h>


namespace jetfuel {
    namespace gui {
        class Drop_down_box: public jetfuel::draw::Drawable,
                             public jetfuel::draw::Rectangle_interface,
                             public IClickable {
        public:
        	/// \brief Default constructor.
        	///
        	/// Constructs an empty Drop_down_box.
            Drop_down_box() {}

            /// \brief Loads the base box image of the Drop_down_box.
            ///
            /// Loads the base box image of the Drop_down_box, including
            /// the color of the image and the border sizes of the
            /// base box image.
            ///
            /// \param jetfuel::draw::Image baseboximage
            /// \param jetfuel::draw::Color baseboxcolor
            /// \param jetfuel::draw::Vector2d_uint bordersizes
            bool Load_base_box_image(jetfuel::draw::Image baseboximage,
                                 const jetfuel::draw::Color baseboxcolor,
                                 const jetfuel::draw::Vector2d_uint bordersizes){
                bool returnvalue = m_basebox.Load_from_image(baseboximage);
                if(returnvalue){
                    m_boxcolor = baseboxcolor;
                    m_baseboxsize = baseboximage.Get_size_of_image();
                    m_bordersizes = bordersizes;

                    Regenerate_options();
                }

                return returnvalue;
            }

            /// \brief Dynamically loads the base box image of the Drop_down_box.
            ///
            /// Dynamically loads the base box image of the Drop_down_box,
            /// including the color of the image and the border sizes of the
            /// base box image. The image are not loaded until right before it is
            /// needed in the Draw() function.
            ///
            /// \param jetfuel::draw::Image baseboximage
            /// \param jetfuel::draw::Color baseboxcolor
            /// \param jetfuel::draw::Vector2d_uint bordersizes
            void Dynamic_load_base_box_image(jetfuel::draw::Image baseboximage,
                                           const jetfuel::draw::Color baseboxcolor,
                                           const jetfuel::draw::Vector2d_uint bordersizes){
                m_baseboxsize = baseboximage.Get_size_of_image();

                m_baseboxdynamicimage = baseboximage;
                m_imagedynamicallyloaded = true;
                m_boxcolor = baseboxcolor;
                m_bordersizes = bordersizes;
            }

            /// \brief Gets the active option of the Drop_down_box.
            ///
            /// Gets the active option of the Drop_down_box.
            std::string Get_active_option() const{
                return m_baseboxtext.Get_string();
            }

            /// \brief Gets the text characteristics of the
            /// Drop_down_box's options.
            ///
            /// Gets the text characteristics of the
            /// Drop_down_box's options.
            jetfuel::draw::Text::Text_characteristics
            Get_option_text_characteristics() const{
                return m_textcharacteristics;
            }

            /// \brief Sets the text characteristics of the
            /// Drop_down_box's options.
            ///
            /// Sets the text characteristics of the
            /// Drop_down_box's options.
            ///
            /// \param jetfuel::draw::Text::Text_characteristics
            /// textcharacteristics
            void Set_option_text_characteristics(jetfuel::draw::Text::
                                                 Text_characteristics
                                                 textcharacteristics){
                m_textcharacteristics = textcharacteristics;
                m_textcharsset = true;

                Regenerate_options();
            }

            /// \brief Gets the UIS action to listen for triggers.
            ///
            /// Gets the Universal Input System action to listen for
            /// triggers.
            std::string Get_UIS_action_to_listen_for() const{
                return m_UISactiontolistenfor;
            }

            /// \brief Sets the UIS action to listen for triggers.
            ///
            /// Sets the Universal Input System action to listen for
            /// triggers.
            ///
            /// \param std::string UISaction
            void Set_UIS_action_to_listen_for(const std::string UISaction){
                m_UISactiontolistenfor = UISaction;
            }

            /// \brief Assigns a renderer to this Drop_down_box.
            ///
            /// Assigns a renderer to this Drop_down_box.
            /// It is recommended that you let jetfuel::draw::Scene
            /// and jetfuel::draw::Scene_manager call this unless
            /// you are not using either of them.
            ///
            /// \param SDL_Renderer *renderer
            void Assign_renderer(SDL_Renderer *renderer)override{
                m_internalrenderer = renderer;

                m_baseboxtext.Assign_renderer(m_internalrenderer);
                m_basebox.Assign_renderer(m_internalrenderer);

                Set_assigned_renderer(true);

                Regenerate_options();
            }

            /// \brief Adds an option to this Drop_down_box.
            ///
            /// Adds an option to this Drop_down_box.
            ///
            /// \param std::string option
            void Add_option(const std::string option);

            jetfuel::draw::Vector2d_int Get_position()override{
                return m_basebox.Get_position();
            }

            void Set_position(const jetfuel::draw::Vector2d_int position)override{
                m_basebox.Set_position(position);

                Regenerate_options();
            }

            jetfuel::draw::Rect2d_int Get_rect_to_draw()override{
                return m_basebox.Get_rect_to_draw();
            }

            void Check_for_clicks(jetfuel::control::Action
                                  UISinterpreterdata)override;

            bool Draw()override;
        protected:
            struct Drop_down_option{
                jetfuel::draw::Rectangle_2d_shape containerbox;
                jetfuel::draw::Text text;
            };

            bool Is_active() const{
                return m_active;
            }

            bool Is_base_box_set() const{
                return m_baseboxset;
            }

            void Set_active(const bool active){
                m_active = active;
            }

            jetfuel::draw::Vector2d_uint Get_border_sizes() const{
                return m_bordersizes;
            }

            bool Is_text_chars_set() const{
                return m_textcharsset;
            }

            void Set_text_characteristics_to_text_object(jetfuel::draw::Text
                                                         *textobject){
                textobject->Set_font(m_textcharacteristics.font);
                textobject->Set_font_size(m_textcharacteristics.fontsize);
                textobject->Set_font_style(m_textcharacteristics.fontstyle);
                textobject->Set_render_mode(m_textcharacteristics.rendermode);
                textobject->Set_text_color(m_textcharacteristics.textcolor);
                textobject->Set_background_color(m_textcharacteristics.
                                             backgroundcolor);
                if(m_textcharacteristics.fontoutlinewidth != 0){
                    textobject->Set_font_outline_width(m_textcharacteristics.
                                                   fontoutlinewidth);
                }
                textobject->Set_kerning_status(m_textcharacteristics.
                                               kerningstatus);

                textobject->Set_font_hinting(m_textcharacteristics.fonthinting);
            }

            jetfuel::draw::Color Get_box_color(){
                return m_boxcolor;
            }

            jetfuel::draw::Vector2d_int Get_size_of_base_box(){
                return m_baseboxsize;
            }

            void Add_drop_down_option_to_vector(Drop_down_option option){
                m_dropdownoptions.push_back(option);
            }

            void Add_option_to_vector(const std::string option){
                bool optionexists = false;
                for(int i = 0; m_options.size() > i; ++i){
                    if(m_options[i] == option){
                        optionexists = true;
                        break;
                    }
                }
                if(!optionexists){
                    m_options.push_back(option);
                }
            }

            size_t Get_size_of_dropdown_options_vector() const{
                return m_dropdownoptions.size();
            }

            Drop_down_option Get_dropdown_option_in_vector(const size_t which){
                if(which >= m_dropdownoptions.size()){
                    throw jetfuel::core::exceptions::
                    Out_of_vector_range_exception();
                }else{
                    return m_dropdownoptions[which];
                }
            }

            void Set_active_drop_down(const size_t which){
                std::string previousfirstoption = m_options[0];
                std::string optiontobefirst = m_options[which+1];

                m_options[0] = optiontobefirst;
                m_options[which+1] = previousfirstoption;

                Regenerate_options();
            }

            void Set_base_box_option(std::string option){
                m_baseboxtext = jetfuel::draw::Text();
                Set_text_characteristics_to_text_object(&m_baseboxtext);
                m_baseboxtext.Set_string(option);

                m_baseboxtext.Set_position(Get_position()+
                jetfuel::draw::Vector2d_int(Get_border_sizes().x,
                Get_border_sizes().y));

                m_baseboxset = true;
            }

            bool Is_image_dynamically_loaded() const{
                return m_imagedynamicallyloaded;
            }

            bool Load_dynamic_image(){
                bool returnvalue = m_basebox.Load_from_image(
                                        m_baseboxdynamicimage);

                m_imagedynamicallyloaded = !returnvalue;

                return returnvalue;
            }

            SDL_Renderer *Get_renderer()override{
                return m_internalrenderer;
            }

            bool Draw_base_box(){
                m_baseboxtext.Assign_renderer(m_internalrenderer);
                return m_basebox.Draw() && m_baseboxtext.Draw();
            }

            bool Draw_all_option_boxes(){
                for(int i = 0; m_dropdownoptions.size() > i; ++i){
                    if(!m_dropdownoptions[i].containerbox.Draw() ||
                       !m_dropdownoptions[i].text.Draw()){
                        return false;
                    }
                }

                return true;
            }
        private:
            bool m_active = false;

            bool m_baseboxset = false;

            jetfuel::draw::Vector2d_uint m_bordersizes;

            SDL_Renderer *m_internalrenderer;

            jetfuel::draw::Color m_boxcolor;
            jetfuel::draw::Sprite m_basebox;
            jetfuel::draw::Text m_baseboxtext;
            jetfuel::draw::Vector2d_int m_baseboxsize;

            jetfuel::draw::Image m_baseboxdynamicimage;
            bool m_imagedynamicallyloaded = false;

            std::string m_UISactiontolistenfor;

            bool m_textcharsset = false;
            jetfuel::draw::Text::Text_characteristics m_textcharacteristics;

            std::vector<Drop_down_option> m_dropdownoptions;
            std::vector<std::string> m_options;

            void Regenerate_options(){
                m_baseboxset = false;

                m_dropdownoptions.clear();

                for(int i = 0; m_options.size() > i; ++i){
                    if(i==0){
                        Set_base_box_option(m_options[0]);
                    }else{
                        Add_option(m_options[i]);
                    }
                }
            }
        };
    } /* namespace gui */
} /* namespace jetfuel */

#endif /* JETFUELGUI_DROPDOWNBOX_H_ */
